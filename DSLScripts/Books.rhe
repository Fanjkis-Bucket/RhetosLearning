Module Bookstore
{
   Entity Book
   {

     

      ShortString Code
      {
          Unique; 
      }
      ShortString Title
      { 
          Required; 

      }
      Integer NumberOfPages;
      Reference Author Bookstore.Person;
      Reference Genre GenreManagment.Genre;

      ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
      InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

      
      ItemFilter ForeignAuthorWithHororBook 'item => item.Genre.Name.Contains("Horror") && item.Extension_ForeignBook.ID != null';

      ComposableFilterBy Book '(query, repository, parameter) => 
      {
          var filter = query.Where(item => item.Extension_ChildrensBook.AgeTo > 10);
          return filter;
      }';


      FilterBy Search '(repository, parameter) =>
      {
          var query = repository.Bookstore.Book.Query(item =>  item.Extension_ChildrensBook.AgeTo < parameter.AgeRestricted);
          
          if(parameter.ForeignBookY == true)
          {
              query = query.Where(item => item.Extension_ForeignBook.ID != null);
          }

          return query.ToSimple().ToArray();

      }';

   }

   Entity Person;
   ShortString Person.Name;


   Entity Comment
    {
        Reference Book 
        {     
            Detail;         
        }
        LongString Text
        {            
            Required;        
        }
        DateTime CreationDate 
        {
            CreationTime; 
        }
    }

   Entity ChildrensBook
    {

        Extends Bookstore.Book;

        Integer AgeFrom
        { 
            Required; 
        }
        Integer AgeTo
        {         
            Required;       
        }
        IntegerRange AgeFrom AgeTo;

        Logging
        {
            AllProperties;
        }

    }

   Entity ForeignBook
    {

        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;

        Logging
        {
            AllProperties;
        }

    }

   Entity Topic
    {

        ShortString Name
        { 
            Unique;
            Required;
        }

        ItemFilter InvalidTopicForBook 'item => item.Name.Contains("Death")';
        LockProperty Name.InvalidTopicForBook ' Name of Topic shouldnt be Death ';

    }


   Entity BookTopic
    {

        Reference Book
        {
          Detail;
        }
        Reference Topic 
        { 
            Required; 
        }

        UniqueMultiple 'Book Topic';
    }


    Browse BookGrid Bookstore.Book
    {

        Take Title;
        Take 'Author.Name';
        Take 'Extension_NumberOfBooksByTopic.NumberOfTopics';

    }


    Parameter Search
    {
        Integer AgeRestricted;
        Bool ForeignBookY;

    }

    
    
    SqlQueryable NumberOfBooksByTopic

    "
        SELECT 
        bk.Id,
        NumberOfTopics = COUNT(bt.TopicID)
        from Bookstore.Book bk
        JOIN Bookstore.BookTopic bt ON bt.BookID = bk.ID
        GROUP BY bk.Id
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;
        
    }



    
}