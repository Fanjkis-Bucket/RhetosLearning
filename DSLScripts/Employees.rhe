Module EmployeeManagment{

	Entity Employee
	{

		ShortString Name { Required; }
		ShortString VAT
		{ 
			Unique;
			RegExMatch '\d{9}' "VAT must have 9 digits";
		}

		Deactivatable;


	}

	Entity Manager
	{

		Extends EmployeeManagment.Employee;

		Integer Bonuses
		{
			MaxValue "10000";
			MinValue "0";
		}

	}

	Entity Record
	{
		
		Reference EmployeeId EmployeeManagment.Employee;

		DateTime DateOfRecord
		{
			CreationTime;
			SystemRequired;
		}
		ShortString Description
		{
			UserRequired;
		}
		DateTime ModifiedOn
		{
			ModificationTimeOf EmployeeManagment.Record.Description;
		}

	}

	SqlView RecordsByDeparments 
		"
			SELECT demp.Name AS 'Deparment' ,empl.Name AS 'Employee', record.Description
			FROM EmployeeManagment.Record record
			JOIN EmployeeManagment.Employee empl ON empl.ID = record.EmployeeIdID
			JOIN DepartmentsManagment.DepartmentEmployee dmempl ON dmempl.EmployeeId = empl.ID
			JOIN DepartmentsManagment.Department demp ON demp.ID = dmempl.DepartmentID;
		"
		{
			AutodetectSqlDependencies;
		}

	SqlQueryable CountRecordsByDeparment
	"
		SELECT Deparment, COUNT(Employee) AS 'Number of Employees', COUNT(Description) AS 'Number of Records' 
		FROM EmployeeManagment.RecordsByDeparments
		GROUP BY Deparment;
	"
	{
		AutodetectSqlDependencies;
	}

	Action InsertMultipleEmployees 
	'(parameter, repository, userInfo) =>{


		while(parameter.NumberOfEmployees != 0)

			{
			
			Random random = new Random();
			string newVAT = random.Next(100000000,999999999).ToString();
			string newName = "Employee " + parameter.NumberOfEmployees;
			var newEmployee = new Employee { Name = newName, VAT = newVAT};

			repository.EmployeeManagment.Employee.Insert(newEmployee);

			}

		}'

	{
		Integer NumberOfEmployees;
	}

}